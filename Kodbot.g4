grammar Kodbot;

start: (main|functionDef*);
main: MAIN block;
functionDef: ID block;
block: L_BRACKET stat R_BRACKET;
stat: (expr | repeat)+ ;
expr: (move|jump|turnLeft|turnRight|functionCall|assign|assignWithAddition|assignWithSubtraction|increment|decrement) SEMICOLON;
repeat: REPEAT L_PARENTHESIS var R_PARENTHESIS block;
functionCall: ID;
var: (ID|NUMBER);
assignWithAddition: ID EQUAL firstRight=var PLUS secondRight=var;
assignWithSubtraction: ID EQUAL firstRight=var MINUS secondRight=var;
assign: ID EQUAL var;
move: MOVE;
jump: JUMP;
turnLeft: TURN_LEFT;
turnRight: TURN_RIGHT;
increment: INCREMENT_ID;
decrement: DECREMENT_ID;

MOVE: 'move';
JUMP: 'jump';
TURN_LEFT: 'left';
TURN_RIGHT: 'right';
INCREMENT_ID: ID'++';
DECREMENT_ID: ID'--';
NUMBER: ('0'..'9')+;
MAIN: 'main';
L_BRACKET: '{';
R_BRACKET: '}';
L_PARENTHESIS: '(';
R_PARENTHESIS: ')';
REPEAT: 'repeat';
EQUAL: '=';
PLUS: '+';
MINUS: '-';
SEMICOLON: ';';
ID: [a-zA-Z][a-zA-Z0-9_]*;
WS : [ \t\r\n]+ -> skip ;
